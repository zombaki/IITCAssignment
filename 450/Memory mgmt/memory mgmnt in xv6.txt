how memory is currently managed inÂ xv6.


Xv6 maintains a separate page table for each process . here in XV6  we maintain different segmentant 
emory management in xv6.
system go through two set of memory transformation, 
First is creating linear address from logical address,here logical address is comprising of segment address + offset.
The conversion of linear address from logical address is taken care by segmentation unit.
second part is ,in xv6 system these linear address gets converted to physical aggress with the help of paging unit.

Though XV6 dosnt use segmentation much,though here we create four segments, that is 
	a)	kernel code,
	b)	kernel data
	c)	user code,
	d)	user data

segmentation has segment selector ,which has different value.
GDT(global descriptor table)  playes a very vital role in converting lagical address to linear address,which basically we are converting segment selector to linear address.
our segment descriptor is represented by segdesc of mmu.h in xv6. we can see there are multiple additional bits are also there.
there is helper macro which converts SEG (type base,lim,dpl) this will help to create segment descriptor in mmu.h



on load of kernal we load the 4 segments using GDT. 
once the segmentation is done we move to paging,

virtual addressing is managed broadly in 3 part, Dir ,table and offset.
dir helps in finding the page directory,on combination with table gives the output to find the physical memory.

kernal has 2 macros to convert virtual address to physical address, and vice versa. to do so ,we use macro V2P and P2V.

physical memory we have base memory allocated for first 640k of memory then we have in XV6 its defined as KERNBASE,
then we have 1MB space allocated for I/O space ,that is stored as KERNLINK will have starting point from where the kernal code starts.
then we have PHYSTOP, till where its extended memory.
these values are set to kmap inside kernal.


Steps done for creating page table(it has paging of each page having 4KB):-
1) enable paging
2) Create/Fill page directory ,which is done using walkpgdir
3) Create/Fill page tables
4) Load the CR3 register, C3 reg is another reg in x86 process,which contains the pointer to page directory.


and in the end for allocating paging we use kalloc command, which is there in kalloc.c. 
now to judge if the page is free or not,we maintain a linked list of free memeory ,that is called free list, freelist will point to the head of free list linked list.


Assignment part 1 and part 2 explanations are there in different files.
